# bot.py

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from tarot import get_random_cards, get_card_image_path, get_random_card
from dream_parser import search_dream
from gpt_interpreter import interpret_cards_with_gpt, chat_with_gpt_gadalka
from config import TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞


bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton('üé¥ –ü–æ–≥–∞–¥–∞—Ç—å'))
    markup.add(KeyboardButton('üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è'))
    markup.add(KeyboardButton('üìñ –°–æ–Ω–Ω–∏–∫'))
    markup.add(KeyboardButton('üí¨ –ß–∞—Ç–∏–∫ —Å –≥–∞–¥–∞–ª–∫–æ–π'))
    

    welcome_text = (
        "‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –º–∞–≥–∏–∏ –∏ —Ç–∞–π–Ω!** ‚ú®\n\n"
        "–Ø ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –¢–∞—Ä–æ, —Å–Ω–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üîÆ **–ü–æ–≥–∞–¥–∞—Ç—å –Ω–∞ –¢–∞—Ä–æ** ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.\n"
        "üåô **–£–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–∞** ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å, –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ.\n"
        "üí´ **–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è** ‚Äî —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥—ë—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è.\n"
        "üí¨ **–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –≥–∞–¥–∞–ª–∫–æ–π** ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –º—É–¥—Ä–æ–π –≥–∞–¥–∞–ª–∫–µ —Å –≤–µ–∫–æ–≤—ã–º –æ–ø—ã—Ç–æ–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ, –∏ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä —Ç–∞–π–Ω –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! üåå"
    )
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == 'üé¥ –ü–æ–≥–∞–¥–∞—Ç—å':
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–∞–π–¥—É –ª–∏ —è –º—É–∂—á–∏–Ω—É?'):")
        bot.register_next_step_handler(message, handle_gadanie)
    elif message.text == 'üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è':
        handle_card_of_the_day(message)
    elif message.text == 'üìñ –°–æ–Ω–Ω–∏–∫':
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å:")
        bot.register_next_step_handler(message, process_dream)
    elif message.text == 'üí¨ –ß–∞—Ç–∏–∫ —Å –≥–∞–¥–∞–ª–∫–æ–π':
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≥–∞–¥–∞–ª–∫–µ:")
        bot.register_next_step_handler(message, handle_gadalka_chat)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


def handle_gadanie(message):
    user_question = message.text  
    bot.send_message(message.chat.id, f"–í–∞—à –≤–æ–ø—Ä–æ—Å: '{user_question}'\n–°–µ–π—á–∞—Å —è –ø–æ–≥–∞–¥–∞—é –¥–ª—è –≤–∞—Å...")


    cards = get_random_cards(3)
    

    card_descriptions = []
    for card_code, card_info in cards:
 
        image_path = get_card_image_path(card_code)
        
        if image_path:
      
            with open(image_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=f"üîÆ {card_info['name']}\nüìú {card_info['description']}"
                )
        else:
      
            bot.send_message(
                message.chat.id,
                f"üîÆ {card_info['name']}\nüìú {card_info['description']}"
            )
        
       
        card_descriptions.append(f"{card_info['name']}: {card_info['description']}")
    
    
    interpretation = interpret_cards_with_gpt(user_question, card_descriptions)
    bot.send_message(message.chat.id, f"üîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç:\n{interpretation}")


def handle_card_of_the_day(message):
    
    card_code, card_info = get_random_card()
    
    image_path = get_card_image_path(card_code)
    if image_path:
        with open(image_path, 'rb') as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=f"üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è: {card_info['name']}\nüìú {card_info['description']}"
            )
    else:
        bot.send_message(
            message.chat.id,
            f"üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è: {card_info['name']}\nüìú {card_info['description']}"
        )
    
    
    interpretation = interpret_cards_with_gpt("–ß—Ç–æ –º–Ω–µ –æ–∂–∏–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?", [f"{card_info['name']}: {card_info['description']}"])
    bot.send_message(message.chat.id, f"üîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:\n{interpretation}")


def process_dream(message):
    dream_text = message.text
    results = search_dream(dream_text)

    if results:
        for result in results:
            response_text = f"<a href='{result['link']}'>{result['title']}</a>\n{result['description']}"
            bot.send_message(message.chat.id, response_text, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


def handle_gadalka_chat(message):
    user_message = message.text
    response = chat_with_gpt_gadalka(user_message)
    bot.send_message(message.chat.id, f"üîÆ –ì–∞–¥–∞–ª–∫–∞:\n{response}")


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
